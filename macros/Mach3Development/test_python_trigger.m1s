' Filename: test_python_trigger.m1s' Purpose: Test Python triggering from Mach3' Status: Testing' Place in C:\Mach3\macros\Mach3Development' ConstantsConst STATUS_SUCCESS = "SUCCESS"Const MAX_WAIT_TIME = 10000 ' 10 seconds timeout in milliseconds' Main executionDim mainFolder, logDir, dataDir, scriptsDirDim fso, shellApp, logFile, statusFilePathDim pythonExe, scriptPath, cmdStringDim startTime, currentTime, statusTextDim fileIsOpen' Get Mach3 main folder (always use this for paths)mainFolder = GetMainFolder()logDir = mainFolder & "ToolManagement\Logs\"dataDir = mainFolder & "ToolManagement\Data\"scriptsDir = mainFolder & "ToolManagement\Scripts\"' Enable error handlingOn Error Resume Next' Create FileSystemObjectSet fso = CreateObject("Scripting.FileSystemObject")If Err.Number <> 0 Then	Message("ERROR: Failed to create FSO - " & Err.Description)	Sleep(200)	Exit SubEnd If' Create directories if they don't existIf Not fso.FolderExists(logDir) Then	fso.CreateFolder(logDir)	If Err.Number <> 0 Then    	Message("ERROR: Failed to create log directory - " & Err.Description)    	Sleep(200)    	Exit Sub	End IfEnd If' Initialize log file trackingfileIsOpen = False' Open log file with error handlingSet logFile = fso.OpenTextFile(logDir & "vbscript_test_log.txt", 8, True) ' 8 = ForAppendingIf Err.Number <> 0 Then	Message("ERROR: Failed to open log file - " & Err.Description)	Sleep(200)	Exit SubElse	fileIsOpen = TrueEnd If' Log start of testlogFile.WriteLine(Now & " - Starting Python integration test")' Clean up any previous status filestatusFilePath = logDir & "execution_status.txt"If fso.FileExists(statusFilePath) Then	fso.DeleteFile(statusFilePath)	If Err.Number <> 0 Then    	Message("WARNING: Could not delete previous status file - " & Err.Description)    	Sleep(100)    	Err.Clear	End IfEnd If' Define Python pathspythonExe = "python"scriptPath = scriptsDir & "test_basic_execution.py"' Verify script existsIf Not fso.FileExists(scriptPath) Then	Message("ERROR: Python script not found at: " & scriptPath)	Sleep(200)	If fileIsOpen Then    	logFile.WriteLine(Now & " - ERROR: Python script not found at: " & scriptPath)    	logFile.Close	End If	Exit SubEnd If' Create command string and log itcmdString = "cmd.exe /c start " & Chr(34) & "Python Test" & Chr(34) & " /min " & pythonExe & " " & Chr(34) & scriptPath & Chr(34)If fileIsOpen Then	logFile.WriteLine(Now & " - Executing: " & cmdString)End If' Create shell objectSet shellApp = CreateObject("WScript.Shell")If Err.Number <> 0 Then	Message("ERROR: Failed to create shell - " & Err.Description)	Sleep(200)	If fileIsOpen Then    	logFile.WriteLine(Now & " - ERROR: Failed to create shell - " & Err.Description)    	logFile.Close	End If	Exit SubEnd If' Run the Python script (minimized)shellApp.Run cmdString, 0, FalseIf Err.Number <> 0 Then	Message("ERROR: Failed to run Python script - " & Err.Description)	Sleep(200)	If fileIsOpen Then    	logFile.WriteLine(Now & " - ERROR: Failed to run Python script - " & Err.Description)    	logFile.Close	End If	Exit SubEnd If' Wait for status file with timeoutstartTime = Timer * 1000  ' Convert to millisecondsMessage("INFO: Waiting for Python script to complete...")Sleep(100)While Not fso.FileExists(statusFilePath)	' Get current time, handle day boundary	currentTime = Timer * 1000	If currentTime < startTime Then    	currentTime = currentTime + 86400000  ' Add milliseconds in a day	End If    	' Check if timeout exceeded	If (currentTime - startTime) > MAX_WAIT_TIME Then    	Message("ERROR: Timeout waiting for Python script to complete")    	Sleep(200)    	If fileIsOpen Then        	logFile.WriteLine(Now & " - ERROR: Test timed out after " & MAX_WAIT_TIME/1000 & " seconds")        	logFile.Close    	End If    	Exit Sub	End If    	Sleep(100)  ' Small delay between checksWend' Check result - with error handling for file operationsOn Error Resume NextIf fso.FileExists(statusFilePath) Then	Set statusFile = fso.OpenTextFile(statusFilePath, 1)  ' 1 = ForReading	If Err.Number <> 0 Then    	Message("ERROR: Failed to open status file - " & Err.Description)    	Sleep(200)    	If fileIsOpen Then        	logFile.WriteLine(Now & " - ERROR: Failed to open status file - " & Err.Description)        	logFile.Close    	End If    	Exit Sub	End If    	statusText = statusFile.ReadLine()	statusFile.Close    	If statusText = STATUS_SUCCESS Then    	Message("SUCCESS: Python integration test completed")    	Sleep(200)    	If fileIsOpen Then        	logFile.WriteLine(Now & " - Test completed successfully")    	End If	Else    	Message("WARNING: Python test returned status: " & statusText)    	Sleep(200)    	If fileIsOpen Then        	logFile.WriteLine(Now & " - Test returned status: " & statusText)    	End If	End IfEnd If' Close log file if openIf fileIsOpen Then	logFile.CloseEnd If' Clean up objectsSet statusFile = NothingSet logFile = NothingSet shellApp = NothingSet fso = Nothing 