' Filename: LoadToolData.m1s
' Purpose: Load tool data from CSV file into Mach3 DROs with validation
' Used in: Auto-startup sequence, Tool Management interface
' Status: Development
' Reference: See "Unified CSV Structure for Tool Management" for complete field specifications
'
' DRO Mapping:
' 1000-1799: Tool data blocks (20 DROs per tool, 40 tools)
'            For tool N: base address = 1000 + (N-1)*20
' 1800-1811: Current active tool properties (copied during tool change)
' 1820-1829: Tool data management flags
'   1820: Last data load timestamp
'   1821: Data validation flag (1=valid, 0=needs reload)
'   1822: Current tool number
'   1899: Passing DRO for direct tool number sharing between macros
'
' Basic Field Mapping (offset from base DRO):
'   +0: tool_number    +5: tool_length
'   +1: tool_type      +6: max_working_length
'   +2: tool_direction +7: tool_holder_z_offset
'   +3: rotation_dir   +8: in_spindle
'   +4: diameter       +9: last_change_time


' Constants for DRO allocation
Const TOOL_DATA_START = 1000
Const TOOLS_PER_BLOCK = 20
Const MAX_TOOLS = 40
Const TIMESTAMP_DRO = 1820
Const VALIDATION_FLAG_DRO = 1821
Const CURRENT_TOOL_DRO = 1822
Const PASSING_TOOL_DRO = 1899

' Validation constants
Const MIN_DIAMETER = 0.1       ' Minimum valid tool diameter (mm)
Const MAX_DIAMETER = 100       ' Maximum valid tool diameter (mm)
Const MIN_TOOL_LENGTH = 5      ' Minimum valid tool length (mm)
Const MAX_TOOL_LENGTH = 300    ' Maximum valid tool length (mm)
Const MIN_DIRECTION = 1        ' Minimum valid direction code
Const MAX_DIRECTION = 6        ' Maximum valid direction code

' File path constants
Const CSV_FILENAME = "tool-data.csv"

' Main execution
Dim mainFolder, csvFilePath
Dim fso, file, csvLine, fileIsOpen
Dim toolCount, loadSuccess, toolNumber
Dim processTime, fieldCount
Dim criticalErrorsExist, criticalErrorCount, nonCriticalErrorCount
Dim errorSummary, isCritical, skipTool, validationMessage
Dim typeCode, rotationCode

' Get the tool number passed directly from the M6 macro
Dim currentTool
currentTool = GetUserDRO(PASSING_TOOL_DRO)
Message("LoadToolData: Using tool number " & CStr(currentTool) & " from passing DRO")
Sleep(100)

' Initialize variables
toolCount = 0
loadSuccess = True
fileIsOpen = False
processTime = Timer()
criticalErrorsExist = False
criticalErrorCount = 0
nonCriticalErrorCount = 0
errorSummary = ""

' Reset validation flag to indicate we're loading
SetUserDRO(VALIDATION_FLAG_DRO, 0)

' Display startup message
Message("Starting tool data load...")
Sleep(100)

' Create FileSystemObject
On Error Resume Next
Set fso = CreateObject("Scripting.FileSystemObject")
If Err.Number <> 0 Then
    Message("ERROR: Failed to create FSO - " & Err.Description)
    Sleep(200)
    ' Set validation flag to failure
    SetUserDRO(VALIDATION_FLAG_DRO, 0)
    Exit Sub
End If

' Get Mach3 main folder (always use absolute paths per compatibility guide)
mainFolder = GetMainFolder()  ' Returns with trailing backslash
csvFilePath = mainFolder & "ToolManagement\Data\" & CSV_FILENAME

' Create directories if they don't exist
On Error Resume Next
If Not fso.FolderExists(mainFolder & "ToolManagement") Then
    fso.CreateFolder(mainFolder & "ToolManagement")
    If Err.Number <> 0 Then
        Message("ERROR: Failed to create ToolManagement folder - " & Err.Description)
        Sleep(200)
        Exit Sub
    End If
End If

If Not fso.FolderExists(mainFolder & "ToolManagement\Data") Then
    fso.CreateFolder(mainFolder & "ToolManagement\Data")
    If Err.Number <> 0 Then
        Message("ERROR: Failed to create Data folder - " & Err.Description)
        Sleep(200)
        Exit Sub
    End If
End If

' Check if file exists
If Not fso.FileExists(csvFilePath) Then
    Message("ERROR: Tool data file not found at: " & csvFilePath)
    Sleep(200)
    SetUserDRO(VALIDATION_FLAG_DRO, 0)
    Exit Sub
End If

' Create backup before reading file
#expand "C:\Mach3\macros\Mach3Development\01_CustomMacros\BackupToolData.m1s"
If Not backupSuccess Then
    Message("WARNING: Unable to create backup, proceeding with caution")
    Sleep(100)
End If

' Open file for reading
Set file = fso.OpenTextFile(csvFilePath, 1) ' 1 = ForReading
If Err.Number <> 0 Then
    Message("ERROR: Failed to open tool data file - " & Err.Description)
    Sleep(200)
    SetUserDRO(VALIDATION_FLAG_DRO, 0)
    Exit Sub
End If
fileIsOpen = True

' Skip header line
If Not file.AtEndOfStream Then
    csvLine = file.ReadLine()
End If

' Process data lines
While Not file.AtEndOfStream
    csvLine = file.ReadLine()
    
    ' Parse the line character by character
    Dim field1, field2, field3, field4, field5, field6, field7, field8, field9, field10
    Dim fieldPos, fieldNum, i, currentChar, fieldValue
    fieldPos = 1
    fieldNum = 1
    
    ' Reset field variables
    field1 = ""
    field2 = ""
    field3 = ""
    field4 = ""
    field5 = ""
    field6 = ""
    field7 = ""
    field8 = ""
    field9 = ""
    field10 = ""
    
    ' Parse character by character
    For i = 1 To Len(csvLine)
        currentChar = Mid(csvLine, i, 1)
        
        If currentChar = "," Then
            ' Extract field value
            fieldValue = Mid(csvLine, fieldPos, i - fieldPos)
            
            ' Store based on position
            If fieldNum = 1 Then
                field1 = Trim(fieldValue)    ' tool_number
            ElseIf fieldNum = 2 Then
                field2 = Trim(fieldValue)    ' tool_type
            ElseIf fieldNum = 3 Then
                field3 = Trim(fieldValue)    ' tool_direction
            ElseIf fieldNum = 4 Then
                field4 = Trim(fieldValue)    ' rotation_direction
            ElseIf fieldNum = 5 Then
                field5 = Trim(fieldValue)    ' diameter
            ElseIf fieldNum = 6 Then
                field6 = Trim(fieldValue)    ' tool_length
            ElseIf fieldNum = 7 Then
                field7 = Trim(fieldValue)    ' max_working_length
            ElseIf fieldNum = 8 Then
                field8 = Trim(fieldValue)    ' tool_holder_z_offset
            ElseIf fieldNum = 9 Then
                field9 = Trim(fieldValue)    ' in_spindle
            End If
            
            ' Move to next field
            fieldPos = i + 1
            fieldNum = fieldNum + 1
        End If
    Next
    
    ' Get the last field
    field10 = Trim(Mid(csvLine, fieldPos))   ' last_change_time
    
    ' Check if tool number is valid
    If IsNumeric(field1) Then
        toolNumber = CInt(field1)
        
        ' Check if tool number is within valid range
        If toolNumber > 0 And toolNumber <= MAX_TOOLS Then
            ' Determine if this is a critical tool (in spindle)
            isCritical = (Trim(field9) = "1")
            
            ' Validate field data
            skipTool = False
            validationMessage = ""
            
            ' Convert tool type to numeric code
            Select Case Trim(UCase(field2))
                Case "MILL"
                    typeCode = 1
                Case "VERTDRILL", "VERTICALDRILL"
                    typeCode = 2
                Case "HORDRILL", "HORIZONTALDRILL"
                    typeCode = 3
                Case "SAW"
                    typeCode = 4
                Case "EMPTY"
                    typeCode = 0
                Case Else
                    typeCode = 0
                    skipTool = True
                    validationMessage = "Invalid tool type: " & field2
            End Select
            
            ' Validate direction (must be 1-6)
            If Not skipTool Then
                If Not IsNumeric(field3) Then
                    skipTool = True
                    validationMessage = "Invalid direction format (not numeric)"
                ElseIf CDbl(field3) < MIN_DIRECTION Or CDbl(field3) > MAX_DIRECTION Then
                    skipTool = True
                    validationMessage = "Direction out of range (1-6)"
                End If
            End If
            
            ' Convert rotation direction to numeric code
            If Not skipTool Then
                Select Case Trim(UCase(field4))
                    Case "CW"
                        rotationCode = 1
                    Case "CCW"
                        rotationCode = 2
                    Case "EMPTY", ""
                        rotationCode = 0
                    Case Else
                        If isCritical Then
                            skipTool = True
                            validationMessage = "Invalid rotation direction: " & field4
                        Else
                            rotationCode = 0  ' Default for non-critical tools
                        End If
                End Select
            End If
            
            ' Validate diameter - skip for saws (type 4)
            If Not skipTool And typeCode <> 4 Then
                If Not IsNumeric(field5) Then
                    skipTool = True
                    validationMessage = "Invalid diameter format (not numeric)"
                ElseIf CDbl(field5) < MIN_DIAMETER Or CDbl(field5) > MAX_DIAMETER Then
                    skipTool = True
                    validationMessage = "Diameter out of range (" & MIN_DIAMETER & "-" & MAX_DIAMETER & ")"
                End If
            End If
            
            ' Validate tool length
            If Not skipTool Then
                If Not IsNumeric(field6) Then
                    skipTool = True
                    validationMessage = "Invalid tool length format (not numeric)"
                ElseIf CDbl(field6) < MIN_TOOL_LENGTH Or CDbl(field6) > MAX_TOOL_LENGTH Then
                    skipTool = True
                    validationMessage = "Tool length out of range (" & MIN_TOOL_LENGTH & "-" & MAX_TOOL_LENGTH & ")"
                End If
            End If
            
            ' Validate in_spindle value
            If Not skipTool Then
                If Not IsNumeric(field9) Then
                    ' Non-critical: Use default 0 (not in spindle)
                    field9 = "0"
                ElseIf CDbl(field9) <> 0 And CDbl(field9) <> 1 Then
                    ' Non-critical: Use default 0 (not in spindle)
                    field9 = "0"
                End If
            End If
            
            ' Handle validation failure
            If skipTool Then
                If isCritical Then
                    criticalErrorsExist = True
                    criticalErrorCount = criticalErrorCount + 1
                    Message("ERROR: Critical tool " & toolNumber & " - " & validationMessage)
                    Sleep(100)
                Else
                    nonCriticalErrorCount = nonCriticalErrorCount + 1
                    Message("WARNING: Tool " & toolNumber & " - " & validationMessage)
                    Sleep(100)
                End If
            Else
                ' Calculate base DRO for this tool
                Dim baseDRO
                baseDRO = TOOL_DATA_START + ((toolNumber - 1) * TOOLS_PER_BLOCK)
                
                ' Store tool data in DROs
                On Error Resume Next
                
                ' Set each DRO with proper error handling between operations
                SetUserDRO(baseDRO + 0, CDbl(field1))      ' tool_number
                If Err.Number <> 0 Then 
                    Err.Clear
                    loadSuccess = False
                End If
                
                SetUserDRO(baseDRO + 1, typeCode)          ' tool_type as numeric code
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                SetUserDRO(baseDRO + 2, CDbl(field3))      ' tool_direction
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                SetUserDRO(baseDRO + 3, rotationCode)      ' rotation_direction as numeric code
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                SetUserDRO(baseDRO + 4, CDbl(field5))      ' diameter
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                SetUserDRO(baseDRO + 5, CDbl(field6))      ' tool_length
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                SetUserDRO(baseDRO + 6, CDbl(field7))      ' max_working_length
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                SetUserDRO(baseDRO + 7, CDbl(field8))      ' tool_holder_z_offset
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                SetUserDRO(baseDRO + 8, CDbl(field9))      ' in_spindle
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                ' Handle timestamp (use current time if invalid)
                Dim numericTimestamp
                If IsNumeric(field10) Then
                    numericTimestamp = CDbl(field10)
                Else
                    numericTimestamp = Timer()
                End If
                
                SetUserDRO(baseDRO + 9, numericTimestamp)  ' last_change_time
                If Err.Number <> 0 Then
                    Err.Clear
                    loadSuccess = False
                End If
                
                ' Check if all operations succeeded
                If Err.Number = 0 Then
                    toolCount = toolCount + 1
                End If
            End If
        Else
            ' Tool number out of range
            Message("WARNING: Tool number out of range: " & toolNumber)
            Sleep(100)
            nonCriticalErrorCount = nonCriticalErrorCount + 1
        End If
    End If
Wend

' Close file if open
If fileIsOpen Then
    file.Close
End If

' Update timestamp (current time in seconds)
SetUserDRO(TIMESTAMP_DRO, Timer())

' Set validation flag based on success criteria:
' 1. At least one tool loaded successfully
' 2. No critical (in-spindle) tools had validation errors
If toolCount > 0 And Not criticalErrorsExist Then
    SetUserDRO(VALIDATION_FLAG_DRO, 1)
    If nonCriticalErrorCount > 0 Then
        Message("SUCCESS: Loaded " & toolCount & " tools with " & nonCriticalErrorCount & " non-critical warnings")
    Else
        Message("SUCCESS: Loaded " & toolCount & " tools in " & FormatNumber(Timer() - processTime, 2) & " seconds")
    End If
    Sleep(200)
Else
    SetUserDRO(VALIDATION_FLAG_DRO, 0)
    If criticalErrorsExist Then
        Message("ERROR: " & criticalErrorCount & " critical tool errors must be fixed before continuing")
    Else
        Message("ERROR: Tool data load failed - no valid tools loaded")
    End If
    Sleep(200)
End If

' We're now using the passed tool number from DRO 1899 (set at beginning)
' currentTool was already set at the beginning of the script

' Diagnostic logging section
Message("SYSTEM: Tool Load Diagnostics")
Sleep(50)
Message("INFO: Passed Tool Number: " & CStr(currentTool))
Sleep(50)

' Calculate base DRO for current tool
Dim toolBaseDRO
toolBaseDRO = TOOL_DATA_START + ((currentTool - 1) * TOOLS_PER_BLOCK)
Message("DEBUG: Base DRO for Tool: " & CStr(toolBaseDRO))
Sleep(50)

Message("INFO: Validation Flag: " & CStr(GetUserDRO(VALIDATION_FLAG_DRO)))
Sleep(50)
Message("INFO: Total Tools Loaded: " & CStr(toolCount))
Sleep(50)

If criticalErrorCount > 0 Then
    Message("WARNING: Critical Errors: " & CStr(criticalErrorCount))
Else
    Message("SUCCESS: No Critical Errors")
End If
Sleep(50)

If nonCriticalErrorCount > 0 Then
    Message("WARNING: Non-Critical Errors: " & CStr(nonCriticalErrorCount))
Else
    Message("SUCCESS: No Non-Critical Errors")
End If
Sleep(50)


' Store current tool number in DRO
SetUserDRO(CURRENT_TOOL_DRO, currentTool)

If currentTool > 0 And currentTool <= MAX_TOOLS Then
    ' Just reuse the already calculated toolBaseDRO
    ' No need to redeclare it with Dim
    
    ' Copy properties to current tool area (1800-1811)
    Dim j
    For j = 0 To 11
        On Error Resume Next
        SetUserDRO(1800 + j, GetUserDRO(toolBaseDRO + j))
        If Err.Number <> 0 Then
            Message("WARNING: Error copying current tool data - " & Err.Description)
            Sleep(100)
            Err.Clear
        End If
    Next
    
    Message("INFO: Tool " & currentTool & " data updated in active DROs")
    Sleep(50)
End If

' Clean up objects
Set file = Nothing
Set fso = Nothing

' Final status message for operator
If criticalErrorCount > 0 Then
    Message("FAILED: 0/" & (toolCount + criticalErrorCount + nonCriticalErrorCount) & " tools loaded - " & criticalErrorCount & " critical errors")
    Sleep(200)
ElseIf nonCriticalErrorCount > 0 Then
    Message("PASSED: " & toolCount & "/" & (toolCount + nonCriticalErrorCount) & " tools loaded with warnings")
    Sleep(200)
Else
    Message("PASSED: All " & toolCount & " tools loaded successfully")
    Sleep(200)
End If